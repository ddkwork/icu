{
  "comments": [
    {
      "key": {
        "uuid": "5e747fa3_ac870bf2",
        "filename": "README.chromium",
        "patchSetId": 1
      },
      "lineNbr": 287,
      "author": {
        "id": 1151758
      },
      "writtenOn": "2018-01-18T19:41:58Z",
      "side": 1,
      "message": "Please, add a reference to the upstream bug:\n\nhttps://ssl.icu-project.org/trac/ticket/12390 .\n\nThanks",
      "range": {
        "startLine": 287,
        "startChar": 1,
        "endLine": 287,
        "endChar": 44
      },
      "revId": "7015efa7f4d039a2ec491b6f06852ded8720919b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "119cf5a7_8e31a58f",
        "filename": "README.chromium",
        "patchSetId": 1
      },
      "lineNbr": 287,
      "author": {
        "id": 1001352
      },
      "writtenOn": "2018-01-23T11:52:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5e747fa3_ac870bf2",
      "range": {
        "startLine": 287,
        "startChar": 1,
        "endLine": 287,
        "endChar": 44
      },
      "revId": "7015efa7f4d039a2ec491b6f06852ded8720919b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0633d92d_6b40e7b5",
        "filename": "source/i18n/smallintformatter.cpp",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1000046
      },
      "writtenOn": "2018-01-17T19:27:51Z",
      "side": 1,
      "message": "ternary expression is best expression.\n\ngrrr...gcc....\n\nThinking more on this, I\u0027m curious why this wasn\u0027t just a chain of expressions? It seems like we\u0027re trading a conditional for fewer comparisons?\n\nHappy to leave as is since it\u0027s the same logic as previously, but if it\u0027s easy, it\u0027d be good to document the optimization rationale.",
      "revId": "7015efa7f4d039a2ec491b6f06852ded8720919b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b20ec4c_6f145c15",
        "filename": "source/i18n/smallintformatter.cpp",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1151758
      },
      "writtenOn": "2018-01-17T21:23:00Z",
      "side": 1,
      "message": "Yeah... I have the same question.",
      "parentUuid": "0633d92d_6b40e7b5",
      "revId": "7015efa7f4d039a2ec491b6f06852ded8720919b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3bc85216_8a07deaa",
        "filename": "source/i18n/smallintformatter.cpp",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1001352
      },
      "writtenOn": "2018-01-23T11:52:47Z",
      "side": 1,
      "message": "Ah yes, I should have added a comment. I simply looked at the disassembled binary code: this is what generates the smallest and fastest code, surprisingly. At least for 32-bit ARM.\n\nDon\u0027t judge me, I know I have strange hobbies...",
      "parentUuid": "1b20ec4c_6f145c15",
      "revId": "7015efa7f4d039a2ec491b6f06852ded8720919b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}