{
  "comments": [
    {
      "key": {
        "uuid": "48af5d65_931c4957",
        "filename": "fuzzers/BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 1149974
      },
      "writtenOn": "2019-10-10T22:38:29Z",
      "side": 1,
      "message": "this is discouraged, could you please add a check in the beginning of LLVMFuzzerTestOneInput instead? see https://chromium.googlesource.com/chromium/src/+/master/testing/libfuzzer/getting_started.md#common-tricks",
      "range": {
        "startLine": 104,
        "startChar": 2,
        "endLine": 104,
        "endChar": 41
      },
      "revId": "43778c4ee37bebb3a0b32cce457a6d2699803c1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "842019f7_9a59ab4e",
        "filename": "fuzzers/BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 1315263
      },
      "writtenOn": "2019-10-14T19:25:47Z",
      "side": 1,
      "message": "I just copied this from the other targets -- I think we can just drop the length requirements unless we have a reason to do otherwise.",
      "parentUuid": "48af5d65_931c4957",
      "range": {
        "startLine": 104,
        "startChar": 2,
        "endLine": 104,
        "endChar": 41
      },
      "revId": "43778c4ee37bebb3a0b32cce457a6d2699803c1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6ee1c157_b357adfc",
        "filename": "fuzzers/BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 1149974
      },
      "writtenOn": "2019-10-14T20:04:31Z",
      "side": 1,
      "message": "SG, if you don\u0027t need to enforce the limit",
      "parentUuid": "842019f7_9a59ab4e",
      "range": {
        "startLine": 104,
        "startChar": 2,
        "endLine": 104,
        "endChar": 41
      },
      "revId": "43778c4ee37bebb3a0b32cce457a6d2699803c1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb0d8638_abba7332",
        "filename": "fuzzers/icu_appendable_fuzzer.cc",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1149974
      },
      "writtenOn": "2019-10-10T22:38:29Z",
      "side": 1,
      "message": "can you please make it a static local variable inside LLVMFuzzerTestOneInput, e.g.:\n\n  static IcuEnvironment env;\n\nit\u0027s not a big deal in most of the cases, but that way it will 100% work with other fuzzing engines, while the existing version might cause issues under certain circumstances",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 43
      },
      "revId": "43778c4ee37bebb3a0b32cce457a6d2699803c1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1289145_cba0e6da",
        "filename": "fuzzers/icu_appendable_fuzzer.cc",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1315263
      },
      "writtenOn": "2019-10-14T19:25:47Z",
      "side": 1,
      "message": "Done -- FYI I copied from https://cs.chromium.org/chromium/src/third_party/icu/fuzzers/icu_break_iterator_fuzzer.cc -- I\u0027m thinking that should be updated too?",
      "parentUuid": "eb0d8638_abba7332",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 43
      },
      "revId": "43778c4ee37bebb3a0b32cce457a6d2699803c1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b8add8bd_f165691e",
        "filename": "fuzzers/icu_appendable_fuzzer.cc",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1149974
      },
      "writtenOn": "2019-10-14T20:04:31Z",
      "side": 1,
      "message": "Sorry, by \"local\" I meant declared inside of `LLVMFuzzerTestOneInput`.\n\nThe fuzz target you\u0027ve mentioned should be updated too indeed. I\u0027d appreciate if you could do it, but feel free to skip as well, as it\u0027s not related to your CL.",
      "parentUuid": "e1289145_cba0e6da",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 43
      },
      "revId": "43778c4ee37bebb3a0b32cce457a6d2699803c1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "252636cd_cff7747f",
        "filename": "fuzzers/icu_appendable_fuzzer.cc",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1315263
      },
      "writtenOn": "2019-10-21T21:24:51Z",
      "side": 1,
      "message": "Looking at this again -- isn\u0027t your suggestion a style guide violation?\nhttps://google.github.io/styleguide/cppguide.html#Static_and_Global_Variables\n\nFrom the guide:\n\nvoid bar() {\n  // bad: non-trivial destructor\n  static std::map\u003cint, int\u003e kData \u003d {{1, 0}, {2, 0}, {3, 0}};\n}\n\nWhat are the issues with this style? \n\n// outside function / class definitions\nstatic IcuEnvironment* env \u003d new IcuEnvironment();\n\nIt seems to be the predominant form in Chromium: \nhttps://cs.chromium.org/search/?q\u003dIcuEnvironment+f:fuzz\u0026p\u003d1\u0026sq\u003dpackage:chromium\u0026type\u003dcs",
      "parentUuid": "b8add8bd_f165691e",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 43
      },
      "revId": "43778c4ee37bebb3a0b32cce457a6d2699803c1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b514f48a_494aa20a",
        "filename": "fuzzers/icu_appendable_fuzzer.cc",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1149974
      },
      "writtenOn": "2019-10-21T22:43:46Z",
      "side": 1,
      "message": "It\u0027s not a style issue in case of fuzzers. We run the same fuzz targets with two fuzzing engines: libFuzzer and AFL. AFL uses fork() and in some cases this global state doesn\u0027t get initialized. I don\u0027t remember the details, metzman@ was investigating and fixing that issue (he\u0027s OOO right now), but that was a pretty rare case, and we should be good with this version as well.",
      "parentUuid": "252636cd_cff7747f",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 43
      },
      "revId": "43778c4ee37bebb3a0b32cce457a6d2699803c1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e0bb0f78_7e5883eb",
        "filename": "fuzzers/icu_appendable_fuzzer.cc",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 1312725
      },
      "writtenOn": "2019-10-10T22:35:07Z",
      "side": 1,
      "message": "Why build this vector instead of using data and size directly?",
      "revId": "43778c4ee37bebb3a0b32cce457a6d2699803c1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b654e2e_63d08d09",
        "filename": "fuzzers/icu_appendable_fuzzer.cc",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 1315263
      },
      "writtenOn": "2019-10-14T19:25:47Z",
      "side": 1,
      "message": "I got the vector idea from the bottom section of https://chromium.googlesource.com/chromium/src/+/master/testing/libfuzzer/getting_started.md#bytes-taken-from-data_size -- the issue of missing some use-out-of-bounds coverage occurs if your pass a subslice of the data array, instead of the whole array, or a copy of the array.",
      "parentUuid": "e0bb0f78_7e5883eb",
      "revId": "43778c4ee37bebb3a0b32cce457a6d2699803c1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9369e7ff_e1e20cbd",
        "filename": "fuzzers/icu_appendable_fuzzer.cc",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1149974
      },
      "writtenOn": "2019-10-10T22:38:29Z",
      "side": 1,
      "message": "I\u0027d replace this with something like:\n\n  const char16_t* data_ptr \u003d reinterpret_cast\u003cconst char16_t*\u003e(data);\n  std::vector\u003cchar16_t\u003e appendChrs(data_ptr, data_ptr + size * sizeof(uint8_t) / sizeof(char16_t));\n\ncan also multiply the size by `rng()`, if that\u0027s important",
      "range": {
        "startLine": 32,
        "startChar": 6,
        "endLine": 35,
        "endChar": 69
      },
      "revId": "43778c4ee37bebb3a0b32cce457a6d2699803c1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb78655a_5b922f88",
        "filename": "fuzzers/icu_appendable_fuzzer.cc",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1315263
      },
      "writtenOn": "2019-10-14T19:25:47Z",
      "side": 1,
      "message": "I\u0027m concerned your suggestion is undefined behavior (UB) due to possible violation of C++ alignment and or aliasing rules (reinterpret_cast to type of stricter alignment requirements, passing that pointer to vector constructor). \n\nI\u0027m not certain (I always get confused by the rules...), and willing to be convinced otherwise -- I know that memcpy() is one way to avoid aliasing problems. \n\nI think the pattern of creating a random, arbitrary-size 16-bit array could be pretty common in a Unicode / char encoding library like ICU, so perhaps the right thing to do is extract this as a function next to the common third_party/icu/fuzzers/fuzzer_utils.h next to UnicodeStringFromUtf32(), which has similar logic. This should hopefully make the code more readable.",
      "parentUuid": "9369e7ff_e1e20cbd",
      "range": {
        "startLine": 32,
        "startChar": 6,
        "endLine": 35,
        "endChar": 69
      },
      "revId": "43778c4ee37bebb3a0b32cce457a6d2699803c1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f2a3b814_4dd00baf",
        "filename": "fuzzers/icu_appendable_fuzzer.cc",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1149974
      },
      "writtenOn": "2019-10-14T20:04:31Z",
      "side": 1,
      "message": "There are other fuzz targets converting the pointer that way, so I\u0027m not super concerned: https://cs.chromium.org/search/?q\u003dfile:fuzz+reinterpret_cast.*16.*data\u0026sq\u003dpackage:chromium\u0026type\u003dcs\n\nWhat\u0027s bothering me is `memcpy` into `.data()`, I\u0027d prefer either `std::copy` or using the constructor instead, but I\u0027m not aware of any rules in this regard, so consider this as a question of preferences :) Either way is fine.",
      "parentUuid": "bb78655a_5b922f88",
      "range": {
        "startLine": 32,
        "startChar": 6,
        "endLine": 35,
        "endChar": 69
      },
      "revId": "43778c4ee37bebb3a0b32cce457a6d2699803c1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "db528693_260ea8a0",
        "filename": "fuzzers/icu_appendable_fuzzer.cc",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1315263
      },
      "writtenOn": "2019-10-21T21:24:51Z",
      "side": 1,
      "message": "Yeah, but a future compiler release could change the behavior -- not to mention fuzz tests run with UBsan (undefined behavior sanitizer), which might trip on this behavior at some point.",
      "parentUuid": "f2a3b814_4dd00baf",
      "range": {
        "startLine": 32,
        "startChar": 6,
        "endLine": 35,
        "endChar": 69
      },
      "revId": "43778c4ee37bebb3a0b32cce457a6d2699803c1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d4078d8b_ee2397e2",
        "filename": "fuzzers/icu_appendable_fuzzer.cc",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1149974
      },
      "writtenOn": "2019-10-21T22:43:46Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "db528693_260ea8a0",
      "range": {
        "startLine": 32,
        "startChar": 6,
        "endLine": 35,
        "endChar": 69
      },
      "revId": "43778c4ee37bebb3a0b32cce457a6d2699803c1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7aaec7e7_7c8bffc2",
        "filename": "fuzzers/icu_appendable_fuzzer.cc",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 1149974
      },
      "writtenOn": "2019-10-10T22:38:29Z",
      "side": 1,
      "message": "doesn\u0027t this return uint64_t value?",
      "range": {
        "startLine": 44,
        "startChar": 35,
        "endLine": 44,
        "endChar": 40
      },
      "revId": "43778c4ee37bebb3a0b32cce457a6d2699803c1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ab89d31_4d05d629",
        "filename": "fuzzers/icu_appendable_fuzzer.cc",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 1315263
      },
      "writtenOn": "2019-10-14T19:25:47Z",
      "side": 1,
      "message": "It does -- I\u0027m narrowing to int32_t since that\u0027s the type getAppendBuffer accepts for the arguments where I use the min_capacity. The narrowing is fine since kScratchBufSize is much smaller than the max int32_t.",
      "parentUuid": "7aaec7e7_7c8bffc2",
      "range": {
        "startLine": 44,
        "startChar": 35,
        "endLine": 44,
        "endChar": 40
      },
      "revId": "43778c4ee37bebb3a0b32cce457a6d2699803c1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e2191bd0_4573f763",
        "filename": "fuzzers/icu_appendable_fuzzer.cc",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 1149974
      },
      "writtenOn": "2019-10-14T20:04:31Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "2ab89d31_4d05d629",
      "range": {
        "startLine": 44,
        "startChar": 35,
        "endLine": 44,
        "endChar": 40
      },
      "revId": "43778c4ee37bebb3a0b32cce457a6d2699803c1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "571e1eb1_0c44e825",
        "filename": "fuzzers/icu_appendable_fuzzer.cc",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 1149974
      },
      "writtenOn": "2019-10-10T22:38:29Z",
      "side": 1,
      "message": "is this some magic constant? would it make sense to leave a comment or maybe there is an existing constant / macro with this value?",
      "range": {
        "startLine": 49,
        "startChar": 39,
        "endLine": 49,
        "endChar": 45
      },
      "revId": "43778c4ee37bebb3a0b32cce457a6d2699803c1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "988f25ea_08e1d2b3",
        "filename": "fuzzers/icu_appendable_fuzzer.cc",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 1315263
      },
      "writtenOn": "2019-10-14T19:25:47Z",
      "side": 1,
      "message": "Nope, it\u0027s not a magic constant -- added a comment.",
      "parentUuid": "571e1eb1_0c44e825",
      "range": {
        "startLine": 49,
        "startChar": 39,
        "endLine": 49,
        "endChar": 45
      },
      "revId": "43778c4ee37bebb3a0b32cce457a6d2699803c1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff059da9_309992e9",
        "filename": "fuzzers/icu_appendable_fuzzer.cc",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 1149974
      },
      "writtenOn": "2019-10-14T20:04:31Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "988f25ea_08e1d2b3",
      "range": {
        "startLine": 49,
        "startChar": 39,
        "endLine": 49,
        "endChar": 45
      },
      "revId": "43778c4ee37bebb3a0b32cce457a6d2699803c1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}