diff --git a/source/i18n/timezone.cpp b/source/i18n/timezone.cpp
index 234f52cc..34245e57 100644
--- a/source/i18n/timezone.cpp
+++ b/source/i18n/timezone.cpp
@@ -42,6 +42,7 @@
 #include "unicode/utypes.h"
 #include "unicode/ustring.h"
 #include "uassert.h"
+#include "umutex.h"
 #include "ustr_imp.h"
 
 #ifdef U_DEBUG_TZ
@@ -519,6 +520,8 @@ TimeZone::detectHostTimeZone()
 
 // -------------------------------------
 
+static UMutex gDefaultZoneMutex = U_MUTEX_INITIALIZER;
+
 /**
  * Initialize DEFAULT_ZONE from the system default time zone.  
  * Upon return, DEFAULT_ZONE will not be NULL, unless operator new()
@@ -528,6 +531,7 @@ static void U_CALLCONV initDefault()
 {
     ucln_i18n_registerCleanup(UCLN_I18N_TIMEZONE, timeZone_cleanup);
 
+    umtx_lock(&gDefaultZoneMutex);
     // If setDefault() has already been called we can skip getting the
     // default zone information from the system.
     if (DEFAULT_ZONE != NULL) {
@@ -549,12 +553,10 @@ static void U_CALLCONV initDefault()
 
     TimeZone *default_zone = TimeZone::detectHostTimeZone();
 
-    // The only way for DEFAULT_ZONE to be non-null at this point is if the user
-    // made a thread-unsafe call to setDefault() or adoptDefault() in another
-    // thread while this thread was doing something that required getting the default.
     U_ASSERT(DEFAULT_ZONE == NULL);
 
     DEFAULT_ZONE = default_zone;
+    umtx_unlock(&gDefaultZoneMutex);
 }
 
 // -------------------------------------
@@ -563,7 +565,12 @@ TimeZone* U_EXPORT2
 TimeZone::createDefault()
 {
     umtx_initOnce(gDefaultZoneInitOnce, initDefault);
-    return (DEFAULT_ZONE != NULL) ? DEFAULT_ZONE->clone() : NULL;
+    umtx_lock(&gDefaultZoneMutex);
+    TimeZone* tz = NULL;
+    if (DEFAULT_ZONE != NULL)
+      tz = DEFAULT_ZONE->clone();
+    umtx_unlock(&gDefaultZoneMutex);
+    return tz;
 }
 
 // -------------------------------------
@@ -573,9 +580,11 @@ TimeZone::adoptDefault(TimeZone* zone)
 {
     if (zone != NULL)
     {
+        umtx_lock(&gDefaultZoneMutex);
         TimeZone *old = DEFAULT_ZONE;
         DEFAULT_ZONE = zone;
         delete old;
+        umtx_unlock(&gDefaultZoneMutex);
         ucln_i18n_registerCleanup(UCLN_I18N_TIMEZONE, timeZone_cleanup);
     }
 }
diff --git a/source/i18n/unicode/timezone.h b/source/i18n/unicode/timezone.h
index 064703e1..84d8dde8 100644
--- a/source/i18n/unicode/timezone.h
+++ b/source/i18n/unicode/timezone.h
@@ -312,10 +312,6 @@ public:
      * zone is set to the default host time zone.  This call adopts the TimeZone object
      * passed in; the client is no longer responsible for deleting it.
      *
-     * <p>This function is not thread safe. It is an error for multiple threads
-     * to concurrently attempt to set the default time zone, or for any thread
-     * to attempt to reference the default zone while another thread is setting it.
-     *
      * @param zone  A pointer to the new TimeZone object to use as the default.
      * @stable ICU 2.0
      */
@@ -326,8 +322,6 @@ public:
      * Same as adoptDefault(), except that the TimeZone object passed in is NOT adopted;
      * the caller remains responsible for deleting it.
      *
-     * <p>See the thread safety note under adoptDefault().
-     *
      * @param zone  The given timezone.
      * @system
      * @stable ICU 2.0
